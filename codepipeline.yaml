AWSTemplateFormatVersion: 2010-09-09
Description: Creacion de una canalizacion CD que se iniciara con acciones sobre un repositorio de AWS CodeCommit para desplegar (Blue/Green) en un cl√∫ster de Amazon ECS respaldado por Amazon EC2 
Parameters:
  AmiID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: ID de la AMI referenciada mediante un secreto de AWS SSM. Debe ser compatible con la arquitectura x86_64
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2'
  NombreRepo:
    Type: String
    Description: Nombre del repositorio de Amazon ECR que se creara
    Default: codepipeline-demo-repo
  ImagenInicial:
    Type: String
    Description: URI de la imagen del contenedor Docker
    Default: public.ecr.aws/docker/library/httpd:latest
  Familia:
    Type: String
    Description: Familia de la definicion de tarea a crear
    Default: familia-definicion-tarea
  Prefijo:
    Type: String
    Description: Prefijo de los recursos
    Default: democodepipeline
  CIDRVPC:
    Type: String
    Description: Bloque CIDR asignado a la VPC de despliegue
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.2.0.0/16
  ProveedorJenkins:
    Type: String
    Description: Nombre de la accion configurada en el plugin de AWS CodePipeline para Jenkins
    Default: Jenkins-Provider
  NombreProyectoJenkins:
    Type: String
    Description: Nombre de la accion configurada en el plugin de AWS CodePipeline para Jenkins
    Default: CodePipelineDemo
  Correo:
    Type: String
    Description: Correo electronico donde se reciben las notificaciones para la aprobacion manual
    Default: jovesau@gmail.com

Resources:

  Source:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        NombreRepositorio: !Ref Prefijo
      TemplateURL: ./codecommit/codecommit.yaml

  Deploy:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        AmiID: !Ref AmiID
        Imagen: !Ref ImagenInicial
        VPC: !Ref CIDRVPC
        Familia: !Ref Familia
      TemplateURL: ./codedeploy/codedeploy.yaml

  RepoDocker:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt FuncionECR.Arn
      RepoECR: !Ref NombreRepo
      
  FuncionECR:
    Type: AWS::Lambda::Function
    Properties:
      Code: ./custom/ecr
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt RolLambdaECR.Arn

  RolLambdaECR:
     Type: AWS::IAM::Role
     Properties:
       AssumeRolePolicyDocument:
         Statement:
         - Action:
           - sts:AssumeRole
           Effect: Allow
           Principal:
             Service:
             - lambda.amazonaws.com
         Version: '2012-10-17'
       Path: "/"
       Policies:
       - PolicyDocument:
           Statement:
           - Action:
             - logs:CreateLogGroup
             - logs:CreateLogStream
             - logs:PutLogEvents
             Effect: Allow
             Resource: arn:aws:logs:*:*:*
           Version: '2012-10-17'
         PolicyName: CloudWatch-Lambda
       - PolicyDocument:
           Statement:
           - Action:
             - ecr:CreateRepository
             - ecr:DeleteRepository
             Effect: Allow
             Resource:
             - '*'
           Version: '2012-10-17'
         PolicyName: ECR-Lambda

  BucketS3Artefactos:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt FuncionS3.Arn
      NombreBucket: !Join
                      - "-"
                      - - !Ref Prefijo
                        - !Select
                          - 0
                          - !Split
                            - "-"
                            - !Select
                              - 2
                              - !Split
                                - "/"
                                - !Ref "AWS::StackId"
      
  FuncionS3:
    Type: AWS::Lambda::Function
    Properties:
      Code: ./custom/s3/
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt RolLambdaS3.Arn
      Environment:
        Variables:
          Region: !Sub ${AWS::Region}

  RolLambdaS3:
     Type: AWS::IAM::Role
     Properties:
       AssumeRolePolicyDocument:
         Statement:
         - Action:
           - sts:AssumeRole
           Effect: Allow
           Principal:
             Service:
             - lambda.amazonaws.com
         Version: '2012-10-17'
       Path: "/"
       Policies:
       - PolicyDocument:
           Statement:
           - Action:
             - logs:CreateLogGroup
             - logs:CreateLogStream
             - logs:PutLogEvents
             Effect: Allow
             Resource: arn:aws:logs:*:*:*
           Version: '2012-10-17'
         PolicyName: CloudWatch-Lambda
       - PolicyDocument:
           Statement:
           - Action:
             - s3:CreateBucket
             - s3:DeleteBucket
             - s3:DeleteObject
             - s3:ListObjects
             - s3:ListBucket
             Effect: Allow
             Resource:
             - !Sub "arn:${AWS::Partition}:s3:::*"
             - !Sub "arn:${AWS::Partition}:s3:::*/*"
           Version: '2012-10-17'
         PolicyName: S3-Lambda
  
  RolCanalizacion:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - 'codepipeline.amazonaws.com'
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:RegisterTaskDefinition'
                Resource: '*'
          PolicyName: PermisosECR
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
                Resource: !GetAtt Source.Outputs.RepoARN
          PolicyName: PermisosCodeCommit
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                  - 'codedeploy:GetApplication'
                  - 'codedeploy:CreateDeployment'
                Resource: 
                  - !Sub
                    - arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${aplicacion}/${grupo}
                    - aplicacion: !GetAtt Deploy.Outputs.AplicacionCodeDeploy
                      grupo: !GetAtt Deploy.Outputs.GrupoDespliegueCodeDeploy
                  - !Sub
                    - arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:application:${aplicacion}
                    - aplicacion: !GetAtt Deploy.Outputs.AplicacionCodeDeploy
                  - !Sub "arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:*"
          PolicyName: PermisosCodeDeploy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: 
                  - !GetAtt BucketS3Artefactos.Arn
                  - !Sub
                    - ${arn}/*
                    - arn: !GetAtt BucketS3Artefactos.Arn
          PolicyName: PermisosS3
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: 
                  - !Ref Notificaciones
          PolicyName: PermisosSNS
          
  RolEventBridge:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: EjecucionCanalizacion
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'codepipeline:StartPipelineExecution'
                Resource: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Canalizacion}"
                    
  ReglaEventBridge:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Sub 
            - arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${repo}
            - repo: !GetAtt Source.Outputs.NombreRepo
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - master
      Targets:
        - Arn: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Canalizacion}"
          RoleArn: !GetAtt RolEventBridge.Arn
          Id: canalizacion-codepipeline

  Canalizacion:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore: 
        Type: S3
        Location: !GetAtt BucketS3Artefactos.NombreBucket
      RestartExecutionOnUpdate: false
      RoleArn: !GetAtt RolCanalizacion.Arn
      Stages:
        - Name: Origen
          Actions:
            - Name: CodeCommit-Repo
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              OutputArtifacts:
                - Name: SalidaOrigen
              Configuration:
                RepositoryName: !GetAtt Source.Outputs.NombreRepo
                BranchName: master
                PollForSourceChanges: false
        - Name: Compilacion
          Actions:
            - Name: Jenkins-Build
              ActionTypeId:
                Category: Build
                Owner: Custom
                Provider: !Ref ProveedorJenkins
                Version: 1
              InputArtifacts:
                - Name: SalidaOrigen
              OutputArtifacts:
                - Name: SalidaCompilacion
              Configuration:
                ProjectName: !Ref NombreProyectoJenkins
        - Name: Despliegue
          Actions:
            - Name: Aprobacion-Manual
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              Configuration:
                CustomData: "Se necesita aprobaci√≥n manual para el despliegue de la aplicaci√≥n"
                NotificationArn: !Ref Notificaciones
              RunOrder: 1
            - Name: CodeDeploy-ECS-EC2-Blue-Green
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeployToECS
                Version: 1
              InputArtifacts:
                - Name: SalidaOrigen
                - Name: SalidaCompilacion
              Configuration:
                ApplicationName: !GetAtt Deploy.Outputs.AplicacionCodeDeploy
                DeploymentGroupName: !GetAtt Deploy.Outputs.GrupoDespliegueCodeDeploy                
                AppSpecTemplateArtifact: SalidaOrigen
                AppSpecTemplatePath: appspec.yaml
                Image1ArtifactName: SalidaCompilacion
                Image1ContainerName: IMAGE1_NAME
                TaskDefinitionTemplateArtifact: SalidaCompilacion
                TaskDefinitionTemplatePath: taskdef.json
              RunOrder: 2

  Notificaciones:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Notificaciones de despliegue
      Subscription:
        - Endpoint: !Ref Correo
          Protocol: email

Outputs:
  Canalizacion:
    Description: Nombre de la canalizacion creada, necesario para configurar la tarea de Jenkins
    Value: !Ref Canalizacion
  RepositorioDocker:
    Description: URI del repositorio de Amazon ECR, necesario para que la tarea de Jenkins cree la imagen Docker
    Value: !Ref RepoDocker
  DefinicionTarea:
    Description: Nombre de la definicion de la tarea, necesario para configurar la tarea de Jenkins
    Value: !GetAtt Deploy.Outputs.Tarea
  URLAplicacion:
    Description: URL del balanceador de carga de la aplicacion
    Value: !GetAtt Deploy.Outputs.ALB