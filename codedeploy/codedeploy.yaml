AWSTemplateFormatVersion: 2010-09-09
Description: Plantilla para la creacion de un grupo de autoscaling y un proyecto de despliegue de un servicio de Amazon ECS (Blue/Green) mediante AWS CodeDeploy
Parameters:
  AmiID:
    Type: String
    Description: ID de la AMI
  Imagen:
    Type: String
    Description: URI de la imagen del contenedor Docker
    Default: public.ecr.aws/docker/library/httpd:latest
  VPC:
    Type: String
    Description: Bloque CIDR asignado a la VPC
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.2.0.0/16
  Familia:
    Type: String
    Description: Familia de la definicion de la tarea

Resources:

  miVPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Nombre: A
        VPC: !Ref VPC
        SubredesPublicas: 'SI'
        SubredesPrivadas: SI
        NATGateways: 'SI'
        Bastion: 'NO'
        LearnerLab: 'NO'
      TemplateURL: ../vpc/vpc.yaml

  ClusterECS:
    Type: AWS::ECS::Cluster

  GrupoSeguridadALB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Trafico HTTP del ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
      VpcId: !GetAtt miVPC.Outputs.VPC

  ReglaEntradaEC2SG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref GrupoSeguridadALB
      GroupId: !Ref GrupoSeguridadEC2
      FromPort: 1024
      ToPort: 65535

  GrupoSeguridadEC2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Trafico HTTP de las instancias EC2
      VpcId: !GetAtt miVPC.Outputs.VPC

  RolEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"

  PerfilInstanciaEC2:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref RolEC2
      Path: "/"

  PlantillaLanzamiento:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref AmiID
        InstanceType: t3.small
        SecurityGroupIds:
          - !GetAtt GrupoSeguridadEC2.GroupId
        IamInstanceProfile: 
          Arn: !GetAtt PerfilInstanciaEC2.Arn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            amazon-linux-extras disable docker
            amazon-linux-extras install -y ecs
            echo "ECS_CLUSTER=${ClusterECS}" >> /etc/ecs/ecs.config
            systemctl enable --now --no-block ecs.service
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource GrupoAutoEscalado --region ${AWS::Region}
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: ECS-Instance

  GrupoAutoEscalado:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: 2
        Timeout: PT10M
    Properties:
      VPCZoneIdentifier:
        - !GetAtt miVPC.Outputs.Privada1
        - !GetAtt miVPC.Outputs.Privada2
      DesiredCapacity: 2
      MinSize: 2
      MaxSize: 6
      LaunchTemplate:
        Version: !GetAtt PlantillaLanzamiento.LatestVersionNumber
        LaunchTemplateId: !Ref PlantillaLanzamiento

  Balanceador:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref GrupoSeguridadALB
      Subnets:
        - !GetAtt miVPC.Outputs.Publica1
        - !GetAtt miVPC.Outputs.Publica2

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref Balanceador
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref GrupoDestinosBlue

  GrupoDestinosBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      TargetType: instance
      VpcId: !GetAtt miVPC.Outputs.VPC
      Protocol: HTTP
      Port: 80
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 90
        
  GrupoDestinosGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      TargetType: instance
      VpcId: !GetAtt miVPC.Outputs.VPC
      Protocol: HTTP
      Port: 80
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 90

  DefinicionTarea:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref Familia
      Memory: "512"
      Cpu: "256"
      ContainerDefinitions:
        - Name: httpd
          Essential: true
          Image: !Ref Imagen
          PortMappings:
            - HostPort: 0
              ContainerPort: 80

  ServicioECS:
    Type: AWS::ECS::Service
    DependsOn: 
      - GrupoAutoEscalado
      - Listener
    Properties:
      Cluster: !Ref ClusterECS
      DeploymentController:
        Type: CODE_DEPLOY
      DesiredCount: 3
      TaskDefinition: !Ref DefinicionTarea
      LoadBalancers:
        - ContainerName: httpd
          ContainerPort: 80
          TargetGroupArn: !Ref GrupoDestinosBlue

  ProveedorCapacidad:
    Type: AWS::ECS::CapacityProvider
    Properties: 
      AutoScalingGroupProvider: 
        AutoScalingGroupArn: !Ref GrupoAutoEscalado
        ManagedScaling: 
          Status: ENABLED
          TargetCapacity: 70
        ManagedTerminationProtection: DISABLED

  AsociacionProveedorCapacidad:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      CapacityProviders:
        - !Ref ProveedorCapacidad
      Cluster: !Ref ClusterECS
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref ProveedorCapacidad
          Base: 0
          Weight: 100

  Aplicacion:
    Type: AWS::CodeDeploy::Application
    Properties: 
      ComputePlatform: ECS

  RolServicioCodeDeploy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS"

  GrupoDespliegue:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref Aplicacion
      ECSServices:
        - ClusterName: !Ref ClusterECS
          ServiceName: !GetAtt ServicioECS.Name
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
            - Name: !GetAtt GrupoDestinosBlue.TargetGroupName
            - Name: !GetAtt GrupoDestinosGreen.TargetGroupName
            ProdTrafficRoute:
              ListenerArns:
                - !Ref Listener
      DeploymentConfigName: CodeDeployDefault.ECSCanary10Percent5Minutes
      ServiceRoleArn: !GetAtt RolServicioCodeDeploy.Arn
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: BLUE_GREEN
      BlueGreenDeploymentConfiguration:
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5

Outputs:
  ALB:
    Description: Punto de enlace del ALB
    Value:
      !Sub
        - "http://${dns}"
        - dns: !GetAtt Balanceador.DNSName
  AplicacionCodeDeploy:
    Description: Aplicacion de AWS CodeDeploy creada
    Value: !Ref Aplicacion
  GrupoDespliegueCodeDeploy:
    Description: Grupo de despliegue de AWS CodeDeploy creado
    Value: !Ref GrupoDespliegue
  Tarea:
    Description: Definicion de la tarea
    Value: !Ref DefinicionTarea
